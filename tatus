[1mdiff --git a/.spyproject/workspace.ini b/.spyproject/workspace.ini[m
[1mindex 06f5bde..cfebbe3 100644[m
[1m--- a/.spyproject/workspace.ini[m
[1m+++ b/.spyproject/workspace.ini[m
[36m@@ -6,5 +6,5 @@[m [msave_non_project_files = False[m
 [m
 [main][m
 version = 0.1.0[m
[31m-recent_files = ['/home/yaroslav/Yaroslavus_GitHub/Tunka_shift_timetable/main_form.py', '/home/yaroslav/Yaroslavus_GitHub/Tunka_shift_timetable/TAIGA_shift_reporter.py'][m
[32m+[m[32mrecent_files = ['/home/yaroslav/Yaroslavus_GitHub/Tunka_shift_timetable/main_form.py', '/home/yaroslav/Yaroslavus_GitHub/Tunka_shift_timetable/TAIGA_shift_timetable.py'][m
 [m
[1mdiff --git a/TAIGA_shift_timetable.py b/TAIGA_shift_timetable.py[m
[1mindex ae31bbd..91fd5c0 100755[m
[1m--- a/TAIGA_shift_timetable.py[m
[1m+++ b/TAIGA_shift_timetable.py[m
[36m@@ -6,6 +6,7 @@[m [mCreated on Tue Oct 26 20:55:06 2021[m
 @author: yaroslav[m
 """[m
 [m
[32m+[m[32mimport gc[m
 import datetime[m
 import tkinter as tk[m
 import threading[m
[36m@@ -26,27 +27,46 @@[m [mtimezone_utc = pytz.timezone('UTC')[m
 [m
 def duration(date, start_time, stop_time):[m
     [m
[32m+[m[32m    garbage = [][m
[32m+[m[41m    [m
     d, m, y = [int(x) for x in date.split(".")][m
     h_start, min_start = [int(x) for x in start_time.split(":")][m
     h_stop, min_stop = [int(x) for x in stop_time.split(":")][m
[32m+[m[41m    [m
[32m+[m[32m    for garbage_item in (d, m, y, h_start, h_stop, min_start, min_stop):[m
[32m+[m[32m        garbage.append(garbage_item)[m
 [m
     start_datetime = datetime.datetime(y, m, d, h_start, min_start)[m
     stop_datetime = datetime.datetime(y, m, d, h_stop, min_stop)[m
     [m
[32m+[m[32m    for garbage_item in garbage:[m
[32m+[m[32m        del garbage_item[m
[32m+[m[41m    [m
     return stop_datetime - start_datetime[m
 [m
 def time_checker(current_utc_datetime, utc_source_date,[m
                  utc_source_start_time, utc_source_stop_time):[m
[32m+[m[41m    [m
[32m+[m[32m    garbage = [][m
 [m
     cur_y, cur_m, cur_d, cur_h, cur_min, cur_s = current_utc_datetime.timetuple()[:6][m
     [m
[32m+[m[32m    for garbage_item in (cur_y, cur_m, cur_d, cur_h, cur_min, cur_s):[m
[32m+[m[32m         garbage.append(garbage_item)[m
[32m+[m[41m    [m
     d, m, y = [int(x) for x in utc_source_date.split(".")][m
     h_start, min_start = [int(x) for x in utc_source_start_time.split(":")][m
     h_stop, min_stop = [int(x) for x in utc_source_stop_time.split(":")][m
[32m+[m[41m    [m
[32m+[m[32m    for garbage_item in (d, m, y, h_start, h_stop, min_start, min_stop):[m
[32m+[m[32m        garbage.append(garbage_item)[m
 [m
     start_datetime = datetime.datetime(y, m, d, h_start, min_start)[m
     stop_datetime = datetime.datetime(y, m, d, h_stop, min_stop)[m
     current_datetime = datetime.datetime(cur_y, cur_m, cur_d, cur_h, cur_min, cur_s)[m
[32m+[m[41m    [m
[32m+[m[32m    for garbage_item in (start_datetime, stop_datetime, current_datetime):[m
[32m+[m[32m        garbage.append(garbage_item)[m
 [m
     if current_datetime <= start_datetime:[m
         status_label = "Time to run"[m
[36m@@ -61,11 +81,17 @@[m [mdef time_checker(current_utc_datetime, utc_source_date,[m
         time_label = current_datetime - stop_datetime[m
         color = "red"[m
 [m
[32m+[m[32m    for garbage_item in garbage:[m
[32m+[m[32m        del garbage_item[m
[32m+[m
     return status_label, time_label, color        [m
         [m
 def page_content_update():[m
     [m
     while True:[m
[32m+[m[41m        [m
[32m+[m[32m        garbage = [][m
[32m+[m[41m        [m
         tunka_datetime_now = datetime.datetime.now(timezone_irkutsk)[m
         tunka_time_now = tunka_datetime_now.strftime("%H:%M:%S")[m
         tunka_date_now = tunka_datetime_now.strftime("%d:%m:%Y")[m
[36m@@ -85,6 +111,10 @@[m [mdef page_content_update():[m
         local_date_now_label['text'] = local_date_now[m
         utc_date_now_label['text'] = utc_date_now[m
         [m
[32m+[m[32m        for garbage_item in (tunka_datetime_now, tunka_time_now, tunka_date_now,[m
[32m+[m[32m                             local_datetime_now, local_time_now, local_date_now,[m
[32m+[m[32m                             utc_datetime_now, utc_time_now, utc_date_now):[m
[32m+[m[32m            garbage.append(garbage_item)[m
         [m
         run_status, run_time, run_color = time_checker(utc_datetime_now, not_zero_duration_sources[0].utc_date,[m
                                                not_zero_duration_sources[0].utc_time_beg,[m
[36m@@ -95,6 +125,9 @@[m [mdef page_content_update():[m
         hiscore_run_status_text_label.grid(row=5, column=7)[m
         hiscore_run_status_label.grid(row=6, column=7)[m
         [m
[32m+[m[32m        for garbage_item in (run_status, run_time, run_color):[m
[32m+[m[32m            garbage.append(garbage_item)[m
[32m+[m[41m        [m
         for i in range(len(not_zero_duration_sources)):[m
 [m
             run_status, run_time, run_color = time_checker(utc_datetime_now, not_zero_duration_sources[i].utc_date,[m
[36m@@ -107,7 +140,12 @@[m [mdef page_content_update():[m
             run_status_label.grid(row=4*i+18, column=7, ipadx=4, padx=4)[m
             run_time_label.grid(row=4*i+19, column=7, ipadx=4, padx=4)[m
             name_label.grid(row=4*i+17, column=1, ipadx=4, padx=4)[m
[32m+[m[41m            [m
[32m+[m[32m            for garbage_item in (run_status, run_time, run_color):[m
[32m+[m[32m                garbage.append(garbage_item)[m
 [m
[32m+[m[32m        for item in garbage:[m
[32m+[m[32m            del item[m
 [m
         sleep(5)[m
 # =============================================================================[m
[36m@@ -118,6 +156,8 @@[m [mclass Source:[m
     [m
     list_of_Sources = [][m
     [m
[32m+[m[32m    __slots__ = ['name', 'code', 'ra', 'dec', 'dt', 'utc_date', 'utc_time_beg', 'utc_time_end', 'tunka_date_beg', 'tunka_time_beg', 'tunka_date_end', 'tunka_time_end'][m
[32m+[m[41m    [m
     def __init__(self, name="Source", code="code", ra=0.0, dec=0.0, dt=0, utc_date=0, utc_time_beg=0,[m
                  utc_time_end=0, tunka_date_beg=0, tunka_time_beg=0, tunka_date_end=0, tunka_time_end=0):[m
         [m
[36m@@ -154,6 +194,8 @@[m [mclass Source:[m
 #[m
 # =============================================================================[m
 [m
[32m+[m[32mgc.enable()[m
[32m+[m
 timetable_data = [][m
 with open(file_name, "r", encoding="cp1251") as fin:[m
 [m
[36m@@ -268,7 +310,7 @@[m [mhiscore_date_tunka_start_label = tk.Label(master=timetable_frame, text=not_zero_[m
 hiscore_time_tunka_stop_label = tk.Label(master=timetable_frame, text=not_zero_duration_sources[-1].tunka_time_end, font=('Times','14', 'bold'))[m
 hiscore_date_tunka_stop_label = tk.Label(master=timetable_frame, text=not_zero_duration_sources[-1].tunka_date_end, font=('Times','14', 'bold'))[m
 hiscore_run_duration_label = tk.Label(master=timetable_frame, text=duration(not_zero_duration_sources[0].utc_date,[m
[31m-        not_zero_duration_sources[0].utc_time_beg, not_zero_duration_sources[0].utc_time_end), font=('Times','14', 'bold'))[m
[32m+[m[32m        not_zero_duration_sources[0].utc_time_beg, not_zero_duration_sources[-1].utc_time_end), font=('Times','14', 'bold'))[m
 hiscore_run_status_label = tk.Label(master=timetable_frame, text=run_time, fg=run_color, font=('Times','14', 'bold'))[m
 [m
 hiscore_label.grid(row=4, column=0, ipadx=4, padx=4)[m
